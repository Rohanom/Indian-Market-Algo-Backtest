// @ts-nocheck
import { NextRequest, NextResponse } from 'next/server';
import { getHistoricalDataParams, getNiftyOptionSymbolWithStrike } from '@/utils/optionsUtils';

// Import TrueData historical API (CommonJS)
// eslint-disable-next-line
const { historical } = require('truedata-nodejs');

export async function POST(request: NextRequest) {
    try {
        const body = await request.json();
        const { 
            tradingDate, 
            strike, 
            optionType = 'CE', 
            interval = '1min',
            customSymbol = null 
        } = body;
        
        console.log(`üìä NIFTY Options data request:`, { tradingDate, strike, optionType, interval });

        // Validate required parameters
        if (!tradingDate) {
            return NextResponse.json(
                {
                    status: 'error',
                    message: 'Missing required parameter: tradingDate',
                    example: {
                        tradingDate: '2024-05-25',
                        strike: 18000,
                        optionType: 'CE',
                        interval: '1min'
                    },
                    timestamp: new Date().toISOString()
                },
                { status: 400 }
            );
        }

        const username = process.env.TRUEDATA_USERNAME;
        const password = process.env.TRUEDATA_PASSWORD;

        if (!username || !password) {
            return NextResponse.json(
                {
                    status: 'error',
                    message: 'TrueData credentials not configured',
                    timestamp: new Date().toISOString()
                },
                { status: 500 }
            );
        }

        let symbol: string;
        let params: any;

        if (customSymbol) {
            // Use custom symbol if provided
            symbol = customSymbol;
            const date = new Date(tradingDate);
            const startTime = new Date(date);
            startTime.setHours(9, 15, 0, 0);
            const endTime = new Date(date);
            endTime.setHours(15, 30, 0, 0);
            
            params = {
                symbol: customSymbol,
                fromDate: startTime.toISOString().slice(0, 19).replace('T', ' '),
                toDate: endTime.toISOString().slice(0, 19).replace('T', ' ')
            };
        } else if (strike && optionType) {
            // Generate symbol with strike and option type
            symbol = getNiftyOptionSymbolWithStrike(tradingDate, strike, optionType);
            params = getHistoricalDataParams(tradingDate);
            params.symbol = symbol;
        } else {
            // Generate base NIFTY symbol without strike
            params = getHistoricalDataParams(tradingDate);
            symbol = params.symbol;
        }

        console.log(`üìà Generated symbol: ${symbol}`);
        console.log(`üïê Time range: ${params.fromDate} to ${params.toDate}`);

        // Authenticate with TrueData
        console.log('üîê Authenticating with TrueData...');
        historical.auth(username, password);
        
        // Fetch historical data
        console.log(`üìä Fetching NIFTY options data for ${symbol}...`);
        const data = await historical.getBarData(symbol, params.fromDate, params.toDate, interval);
        
        console.log(`‚úÖ Retrieved ${data ? data.length || 0 : 0} data points`);

        return NextResponse.json({
            status: 'success',
            symbol,
            tradingDate,
            interval,
            fromDate: params.fromDate,
            toDate: params.toDate,
            expiryDate: params.expiryDate,
            dataPoints: data ? data.length || 0 : 0,
            data,
            metadata: {
                strike: strike || null,
                optionType: optionType || null,
                isAutoGenerated: !customSymbol
            },
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå Error fetching NIFTY options data:', error);
        return NextResponse.json(
            {
                status: 'error',
                message: error instanceof Error ? error.message : 'Unknown error',
                timestamp: new Date().toISOString()
            },
            { status: 500 }
        );
    }
}

// GET endpoint for documentation and testing
export async function GET() {
    return NextResponse.json({
        title: 'TrueData NIFTY Options Data API',
        description: 'Fetch historical data for NIFTY options with automatic expiry calculation',
        method: 'POST',
        parameters: {
            tradingDate: 'Trading date (YYYY-MM-DD)',
            strike: 'Strike price (optional, e.g., 18000)',
            optionType: 'Option type (optional, CE or PE)',
            interval: 'Data interval (optional, default: 1min)',
            customSymbol: 'Custom symbol (optional, overrides auto-generation)'
        },
        examples: [
            {
                title: 'Get NIFTY base symbol for May 25, 2024',
                request: {
                    tradingDate: '2024-05-25'
                },
                generatedSymbol: 'NIFTY240529'
            },
            {
                title: 'Get NIFTY Call option for May 25, 2024',
                request: {
                    tradingDate: '2024-05-25',
                    strike: 18000,
                    optionType: 'CE'
                },
                generatedSymbol: 'NIFTY24052918000CE'
            },
            {
                title: 'Get NIFTY Put option for May 25, 2024',
                request: {
                    tradingDate: '2024-05-25',
                    strike: 17500,
                    optionType: 'PE'
                },
                generatedSymbol: 'NIFTY24052917500PE'
            },
            {
                title: 'Use custom symbol',
                request: {
                    tradingDate: '2024-05-25',
                    customSymbol: 'NIFTY24060618500CE'
                }
            }
        ],
        logic: {
            expiryCalculation: 'Automatically finds next Thursday from trading date',
            symbolFormat: 'NIFTY + YYMMDD + [STRIKE] + [CE/PE]',
            timeRange: '9:15 AM to 3:30 PM IST on trading date'
        },
        timestamp: new Date().toISOString()
    });
} 