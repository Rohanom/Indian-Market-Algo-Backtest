'use client';

import { useState } from 'react';
import { getNiftyOptionSymbol, getNiftyOptionSymbolWithStrike, getHistoricalDataParams } from '@/utils/optionsUtils';

interface OptionsData {
    status: string;
    symbol?: string;
    tradingDate?: string;
    interval?: string;
    fromDate?: string;
    toDate?: string;
    expiryDate?: string;
    dataPoints?: number;
    data?: any;
    records?: any[];
    apiStatus?: string;
    serviceUsed?: string;
    serviceUrl?: string;
    metadata?: {
        strike?: number;
        optionType?: string;
        isAutoGenerated?: boolean;
    };
    message?: string;
    timestamp: string;
}

export default function NiftyOptionsTest() {
    const [authResult, setAuthResult] = useState<any>(null);
    const [serviceStatus, setServiceStatus] = useState<any>(null);
    const [optionsData, setOptionsData] = useState<OptionsData | null>(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    // Form data for options request
    const [tradingDate, setTradingDate] = useState('2025-06-11');
    const [strike, setStrike] = useState<number>(23500);
    const [optionType, setOptionType] = useState<'CE' | 'PE'>('CE');
    const [interval, setInterval] = useState('1min');
    const [useStrike, setUseStrike] = useState(true);

    // Preview of generated symbol
    const previewSymbol = useStrike 
        ? getNiftyOptionSymbolWithStrike(tradingDate, strike, optionType)
        : getNiftyOptionSymbol(tradingDate);

    const previewParams = getHistoricalDataParams(tradingDate);

    const checkServiceStatus = async () => {
        setLoading(true);
        setError(null);
        
        try {
            const response = await fetch('http://localhost:3001/health');
            const data = await response.json();
            setServiceStatus(data);
        } catch (err) {
            setError('TrueData service is not running. Start it with: cd truedata-service && npm start');
            console.error('Service status error:', err);
        } finally {
            setLoading(false);
        }
    };

    const testAuth = async () => {
        setLoading(true);
        setError(null);
        
        try {
            const response = await fetch('http://localhost:3001/auth/test');
            const data = await response.json();
            
            if (data.status === 'success') {
                setAuthResult(data);
            } else {
                setError(data.message);
            }
        } catch (err) {
            setError('Failed to test authentication. Make sure TrueData service is running.');
            console.error('Auth test error:', err);
        } finally {
            setLoading(false);
        }
    };

    const fetchOptionsData = async () => {
        setLoading(true);
        setError(null);
        
        try {
            const requestBody: any = {
                tradingDate,
                interval
            };

            if (useStrike) {
                requestBody.strike = strike;
                requestBody.optionType = optionType;
            }

            const response = await fetch('/api/truedata/nifty-options', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody)
            });
            
            const data = await response.json();
            
            if (data.status === 'success') {
                setOptionsData(data);
            } else {
                setError(data.message);
            }
        } catch (err) {
            setError('Failed to fetch options data');
            console.error('Options data error:', err);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="container mx-auto p-6">
            <h1 className="text-3xl font-bold mb-6 text-gray-900 dark:text-white">NIFTY Options Data Test</h1>
            
            {/* Service Status */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-6">
                <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">TrueData Service Status</h2>
                
                <div className="space-x-4">
                    <button
                        onClick={checkServiceStatus}
                        disabled={loading}
                        className="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 disabled:bg-gray-400"
                    >
                        {loading ? 'Checking...' : 'Check Service Status'}
                    </button>
                    
                    <button
                        onClick={testAuth}
                        disabled={loading}
                        className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:bg-gray-400"
                    >
                        {loading ? 'Testing...' : 'Test Authentication'}
                    </button>
                </div>
                
                {serviceStatus && (
                    <div className="mt-4 p-4 bg-blue-100 dark:bg-blue-900 rounded">
                        <h3 className="font-semibold text-blue-800 dark:text-blue-200">Service Status: {serviceStatus.status}</h3>
                        <div className="text-blue-700 dark:text-blue-300 text-sm mt-1 space-y-1">
                            <p>Service: {serviceStatus.service}</p>
                            <p>Username: {serviceStatus.credentials?.username}</p>
                            <p>Password: {serviceStatus.credentials?.password}</p>
                            <p>Timestamp: {serviceStatus.timestamp}</p>
                        </div>
                    </div>
                )}
                
                {authResult && (
                    <div className="mt-4 p-4 bg-green-100 dark:bg-green-900 rounded">
                        <h3 className="font-semibold text-green-800 dark:text-green-200">Authentication Successful!</h3>
                        <p className="text-green-700 dark:text-green-300 text-sm mt-1">Username: {authResult.username}</p>
                        <p className="text-green-700 dark:text-green-300 text-sm">Timestamp: {authResult.timestamp}</p>
                    </div>
                )}
            </div>

            {/* Symbol Preview */}
            <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-6 mb-6">
                <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">Symbol Preview</h2>
                
                <div className="grid grid-cols-2 gap-4 text-sm text-gray-700 dark:text-gray-300">
                    <div>
                        <strong>Generated Symbol:</strong> 
                        <code className="ml-2 bg-blue-100 dark:bg-blue-800 px-2 py-1 rounded text-blue-800 dark:text-blue-200">{previewSymbol}</code>
                    </div>
                    <div>
                        <strong>Expiry Date:</strong> 
                        <span className="ml-2">{previewParams.expiryDate}</span>
                    </div>
                    <div>
                        <strong>From Time:</strong> 
                        <span className="ml-2">{previewParams.fromDate}</span>
                    </div>
                    <div>
                        <strong>To Time:</strong> 
                        <span className="ml-2">{previewParams.toDate}</span>
                    </div>
                </div>
            </div>

            {/* NIFTY Options Data Test */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-6">
                <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">NIFTY Options Data Test</h2>
                
                <div className="grid grid-cols-2 gap-4 mb-6">
                    <div>
                        <label className="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300">Trading Date</label>
                        <input
                            type="date"
                            value={tradingDate}
                            onChange={(e) => setTradingDate(e.target.value)}
                            className="w-full border border-gray-300 dark:border-gray-600 rounded px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                        />
                    </div>
                    
                    <div>
                        <label className="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300">Interval</label>
                        <select 
                            value={interval} 
                            onChange={(e) => setInterval(e.target.value)}
                            className="w-full border border-gray-300 dark:border-gray-600 rounded px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                        >
                            <option value="1min">1 Minute</option>
                            <option value="5min">5 Minutes</option>
                            <option value="15min">15 Minutes</option>
                            <option value="30min">30 Minutes</option>
                            <option value="1hour">1 Hour</option>
                        </select>
                    </div>
                </div>

                <div className="mb-4">
                    <label className="flex items-center text-gray-700 dark:text-gray-300">
                        <input
                            type="checkbox"
                            checked={useStrike}
                            onChange={(e) => setUseStrike(e.target.checked)}
                            className="mr-2"
                        />
                        Include Strike Price and Option Type
                    </label>
                </div>
                
                {useStrike && (
                    <div className="grid grid-cols-2 gap-4 mb-4">
                        <div>
                            <label className="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300">Strike Price</label>
                            <input
                                type="number"
                                value={strike}
                                onChange={(e) => setStrike(Number(e.target.value))}
                                className="w-full border border-gray-300 dark:border-gray-600 rounded px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                                step="50"
                                min="10000"
                                max="30000"
                            />
                        </div>
                        
                        <div>
                            <label className="block text-sm font-medium mb-1 text-gray-700 dark:text-gray-300">Option Type</label>
                            <select 
                                value={optionType} 
                                onChange={(e) => setOptionType(e.target.value as 'CE' | 'PE')}
                                className="w-full border border-gray-300 dark:border-gray-600 rounded px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                            >
                                <option value="CE">Call (CE)</option>
                                <option value="PE">Put (PE)</option>
                            </select>
                        </div>
                    </div>
                )}
                
                <button
                    onClick={fetchOptionsData}
                    disabled={loading}
                    className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 disabled:bg-gray-400"
                >
                    {loading ? 'Fetching...' : 'Fetch NIFTY Options Data'}
                </button>
                
                {optionsData && (
                    <div className="mt-4 p-4 bg-green-100 dark:bg-green-900 rounded">
                        <h3 className="font-semibold text-green-800 dark:text-green-200">
                            Options Data Retrieved! ({optionsData.dataPoints} data points)
                        </h3>
                        <div className="text-sm mt-2 text-green-700 dark:text-green-300 space-y-1">
                            <p><strong>Symbol:</strong> {optionsData.symbol}</p>
                            <p><strong>Trading Date:</strong> {optionsData.tradingDate}</p>
                            <p><strong>Expiry Date:</strong> {optionsData.expiryDate}</p>
                            <p><strong>Interval:</strong> {optionsData.interval}</p>
                            <p><strong>API Status:</strong> {optionsData.apiStatus}</p>
                            <p><strong>Service:</strong> {optionsData.serviceUsed} ({optionsData.serviceUrl})</p>
                            {optionsData.metadata?.strike && (
                                <p><strong>Strike & Type:</strong> {optionsData.metadata.strike} {optionsData.metadata.optionType}</p>
                            )}
                        </div>
                        
                        {optionsData.records && optionsData.records.length > 0 && (
                            <div className="mt-4">
                                <h4 className="font-semibold mb-2">Sample Data (First 3 records):</h4>
                                <pre className="text-xs bg-white dark:bg-gray-800 p-2 rounded border border-gray-300 dark:border-gray-600 overflow-x-auto text-gray-900 dark:text-gray-100">
                                    {JSON.stringify(optionsData.records.slice(0, 3), null, 2)}
                                </pre>
                                
                                <div className="mt-4 grid grid-cols-2 gap-4 text-xs">
                                    <div>
                                        <strong>First Record:</strong>
                                        <p>Time: {optionsData.records[0]?.timestamp}</p>
                                        <p>Open: {optionsData.records[0]?.open}</p>
                                        <p>High: {optionsData.records[0]?.high}</p>
                                        <p>Low: {optionsData.records[0]?.low}</p>
                                        <p>Close: {optionsData.records[0]?.close}</p>
                                        <p>Volume: {optionsData.records[0]?.Volume}</p>
                                    </div>
                                    <div>
                                        <strong>Last Record:</strong>
                                        <p>Time: {optionsData.records[optionsData.records.length - 1]?.timestamp}</p>
                                        <p>Open: {optionsData.records[optionsData.records.length - 1]?.open}</p>
                                        <p>High: {optionsData.records[optionsData.records.length - 1]?.high}</p>
                                        <p>Low: {optionsData.records[optionsData.records.length - 1]?.low}</p>
                                        <p>Close: {optionsData.records[optionsData.records.length - 1]?.close}</p>
                                        <p>Volume: {optionsData.records[optionsData.records.length - 1]?.Volume}</p>
                                    </div>
                                </div>
                            </div>
                        )}
                        
                        {optionsData.dataPoints === 0 && (
                            <div className="mt-4 p-3 bg-yellow-100 dark:bg-yellow-900 rounded">
                                <p className="text-yellow-800 dark:text-yellow-200 text-sm">
                                    No data available for this symbol/date. Try using dates with trading activity or check if the option exists.
                                </p>
                            </div>
                        )}
                    </div>
                )}
            </div>

            {/* Error Display */}
            {error && (
                <div className="bg-red-100 dark:bg-red-900 border border-red-400 dark:border-red-600 text-red-700 dark:text-red-200 px-4 py-3 rounded mb-6">
                    <strong>Error:</strong> {error}
                </div>
            )}

            {/* Examples */}
            <div className="bg-blue-50 dark:bg-gray-700 rounded-lg p-6">
                <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">Examples</h2>
                
                <div className="space-y-4 text-sm text-gray-700 dark:text-gray-300">
                    <div>
                        <h3 className="font-semibold text-gray-900 dark:text-white">For Trading Date: June 11, 2025</h3>
                        <ul className="mt-2 space-y-1 ml-4">
                            <li>• Base symbol: <code className="bg-gray-100 dark:bg-gray-600 px-1 rounded text-gray-800 dark:text-gray-200">NIFTY250612</code> (Next Thursday: June 12)</li>
                            <li>• Call option: <code className="bg-gray-100 dark:bg-gray-600 px-1 rounded text-gray-800 dark:text-gray-200">NIFTY25061223500CE</code></li>
                            <li>• Put option: <code className="bg-gray-100 dark:bg-gray-600 px-1 rounded text-gray-800 dark:text-gray-200">NIFTY25061223000PE</code></li>
                        </ul>
                    </div>
                    
                    <div>
                        <h3 className="font-semibold text-gray-900 dark:text-white">Logic</h3>
                        <ul className="mt-2 space-y-1 ml-4">
                            <li>• Automatically finds next Thursday from trading date</li>
                            <li>• Formats as NIFTY + YYMMDD + [STRIKE] + [CE/PE]</li>
                            <li>• Time range: 9:15 AM to 3:30 PM IST</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    );
} 