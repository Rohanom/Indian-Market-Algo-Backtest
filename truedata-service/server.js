const express = require('express');
const cors = require('cors');
const { historical } = require('truedata-nodejs');
require('dotenv').config({ path: '../.env' });

const app = express();
const PORT = process.env.TRUEDATA_SERVICE_PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// TrueData credentials
const TRUEDATA_USER = process.env.TRUEDATA_USERNAME;
const TRUEDATA_PWD = process.env.TRUEDATA_PASSWORD;

console.log('üöÄ TrueData Service Starting...');
console.log('Username:', TRUEDATA_USER);
console.log('Port:', PORT);

// Health check
app.get('/health', (req, res) => {
    res.json({
        status: 'ok',
        service: 'TrueData Service',
        timestamp: new Date().toISOString(),
        credentials: {
            username: TRUEDATA_USER ? 'configured' : 'missing',
            password: TRUEDATA_PWD ? 'configured' : 'missing'
        }
    });
});

// Test authentication
app.get('/auth/test', async (req, res) => {
    try {
        if (!TRUEDATA_USER || !TRUEDATA_PWD) {
            return res.status(400).json({
                status: 'error',
                message: 'TrueData credentials not configured'
            });
        }

        console.log('üîê Testing authentication...');
        const authResult = historical.auth(TRUEDATA_USER, TRUEDATA_PWD);
        
        res.json({
            status: 'success',
            message: 'Authentication successful',
            username: TRUEDATA_USER,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        console.error('‚ùå Auth failed:', error);
        res.status(500).json({
            status: 'error',
            message: error.message
        });
    }
});

// NIFTY Options data endpoint
app.post('/nifty/options', async (req, res) => {
    try {
        const { tradingDate, strike, optionType = 'CE', interval = '1min', customSymbol } = req.body;
        
        if (!tradingDate && !customSymbol) {
            return res.status(400).json({
                status: 'error',
                message: 'tradingDate or customSymbol required',
                example: {
                    tradingDate: '2025-05-25',
                    strike: 24000,
                    optionType: 'CE',
                    interval: '1min'
                }
            });
        }

        if (!TRUEDATA_USER || !TRUEDATA_PWD) {
            return res.status(500).json({
                status: 'error',
                message: 'TrueData credentials not configured'
            });
        }

        // Generate symbol and date range
        let symbol, fromDate, toDate, expiryDate;
        
        if (customSymbol) {
            symbol = customSymbol;
            // Use provided trading date for time range
            const date = new Date(tradingDate);
            fromDate = formatDateForTrueData(date, 9, 15);
            toDate = formatDateForTrueData(date, 15, 30);
        } else {
            // Auto-generate NIFTY options symbol
            const result = generateNiftyOptions(tradingDate, strike, optionType);
            symbol = result.symbol;
            fromDate = result.fromDate;
            toDate = result.toDate;
            expiryDate = result.expiryDate;
        }

        console.log(`üìä Fetching: ${symbol} from ${fromDate} to ${toDate}`);

        // Authenticate and fetch data
        historical.auth(TRUEDATA_USER, TRUEDATA_PWD);
        const data = await historical.getBarData(symbol, fromDate, toDate, interval);
        
        const dataPoints = data && data.Records ? data.Records.length : 0;
        console.log(`‚úÖ Retrieved ${dataPoints} data points`);
        console.log(`Status: ${data ? data.status : 'No response'}`);

        res.json({
            status: 'success',
            symbol,
            tradingDate,
            interval,
            fromDate,
            toDate,
            expiryDate,
            dataPoints,
            data,
            records: data && data.Records ? data.Records : [],
            apiStatus: data ? data.status : 'No response',
            metadata: {
                strike: strike || null,
                optionType: optionType || null,
                isAutoGenerated: !customSymbol
            },
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå Options data error:', error);
        res.status(500).json({
            status: 'error',
            message: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// General historical data endpoint
app.post('/historical/bars', async (req, res) => {
    try {
        const { symbol, from, to, interval = '1min' } = req.body;
        
        if (!symbol || !from || !to) {
            return res.status(400).json({
                status: 'error',
                message: 'Missing required: symbol, from, to'
            });
        }

        historical.auth(TRUEDATA_USER, TRUEDATA_PWD);
        const data = await historical.getBarData(symbol, from, to, interval);
        
        const dataPoints = data && data.Records ? data.Records.length : 0;
        console.log(`‚úÖ Retrieved ${dataPoints} data points for ${symbol}`);
        
        res.json({
            status: 'success',
            symbol,
            interval,
            from,
            to,
            dataPoints,
            data,
            records: data && data.Records ? data.Records : [],
            apiStatus: data ? data.status : 'No response',
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå Historical data error:', error);
        res.status(500).json({
            status: 'error',
            message: error.message
        });
    }
});

// Utility functions
function getNextThursday(date) {
    const nextThursday = new Date(date);
    const dayOfWeek = date.getDay();
    let daysToAdd = 4 - dayOfWeek;
    if (daysToAdd <= 0) daysToAdd += 7;
    nextThursday.setDate(date.getDate() + daysToAdd);
    return nextThursday;
}

function formatDateForTrueData(date, hours = 0, minutes = 0) {
    const d = new Date(date);
    if (hours !== undefined) d.setHours(hours, minutes, 0, 0);
    
    const yy = d.getFullYear().toString().slice(-2);
    const mm = (d.getMonth() + 1).toString().padStart(2, '0');
    const dd = d.getDate().toString().padStart(2, '0');
    const hh = d.getHours().toString().padStart(2, '0');
    const min = d.getMinutes().toString().padStart(2, '0');
    const ss = d.getSeconds().toString().padStart(2, '0');
    
    return `${yy}${mm}${dd}T${hh}:${min}:${ss}`;
}

function generateNiftyOptions(tradingDate, strike, optionType) {
    const date = new Date(tradingDate);
    const expiryDate = getNextThursday(date);
    
    // Format expiry as YYMMDD
    const yy = expiryDate.getFullYear().toString().slice(-2);
    const mm = (expiryDate.getMonth() + 1).toString().padStart(2, '0');
    const dd = expiryDate.getDate().toString().padStart(2, '0');
    
    let symbol = `NIFTY${yy}${mm}${dd}`;
    if (strike && optionType) {
        symbol += `${strike}${optionType}`;
    }
    
    return {
        symbol,
        fromDate: formatDateForTrueData(date, 9, 15),
        toDate: formatDateForTrueData(date, 15, 30),
        expiryDate: formatDateForTrueData(expiryDate)
    };
}

// Start server
app.listen(PORT, () => {
    console.log(`‚úÖ TrueData Service running on port ${PORT}`);
    console.log(`ü©∫ Health: http://localhost:${PORT}/health`);
    console.log(`üîê Auth test: http://localhost:${PORT}/auth/test`);
    console.log(`üìä NIFTY Options: POST http://localhost:${PORT}/nifty/options`);
});

// Error handling
process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason) => {
    console.error('‚ùå Unhandled Rejection:', reason);
}); 